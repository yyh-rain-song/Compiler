define fibo (v0) {
	b0:
	mov v0, rdi     #fibo(v0)
	jl v0, 2, b1, b2
	b2:             #b2-b1: calc fibo(v0) when v0>=2
	mov v1, v0
	sub v1, 1
	mov v2, v1      #v2=v0-1
	b3:             #b4-b5: calc fibo(v2)
	jl v2, 2, b4, b5
	b5:             #calc fibo(v2) when v2>2
	mov v3, v2
	sub v3, 1
	mov rdi, v3
	call rax = fibo, v3
	mov v4, rax     #v4 = fibo(v2-1)
	mov rax, v2
	imul v4         #rax = v4*v2
	mov v5, rax
	mov rax, v5     #rax = v2 * fibo(v2-1)
	jmp b6
	b4:
	mov rax, v2     #if v2<2 rax = v2
	b6:
	mov v6, rax     #v6 = fibo(v2)
	mov rax, v2     #there should be v0, not v2
	imul v6
	mov v7, rax     #
	mov rax, v7
	jmp b7
	b1:             #fibo(v0) when v0<2
	mov rax, v0
	b7:
	ret 
}
define main () {
	b8:
	mov v8, 3
	b9:
	jl v8, 2, b10, b11
	b11:
	mov v9, v8
	sub v9, 1
	mov rdi, v9
	call rax = fibo, v9
	mov v10, rax
	mov rax, v8
	imul v10
	mov v11, rax
	mov rax, v11
	jmp b12
	b10:
	mov rax, v8
	b12:
	mov v12, rax
	mov rdi, v12
	call rax = toString, v12
	mov v13, rax
	mov rdi, v13
	call rax = println, v13
	mov rax, 0
	b13:
	ret 
}
define init () {
	b14:
	call rax = main
	ret 
}
