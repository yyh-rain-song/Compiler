_f:
	b0:
	push rbp
	mov rbp, rsp
	mov rsi, rdi
	mov rcx, 0
	mov rdi, 0
	b1:
	cmp rdi, rsi
	jl b2
	b3:
	mov rax, rcx
	b4:
	leave
	ret 
	b2:
	mov r8, rcx
	add r8, rdi
	mov rcx, rdi
	sub rcx, 1
	mov r9, rsi
	and r9, rcx
	mov rcx, r8
	xor rcx, r9
	mov rax, rcx
	cdq
	mov rcx, 10000
	idiv rcx
	mov rcx, rdx
	b5:
	add rdi, 1
	jmp b1
_main:
	b6:
	push rbp
	mov rbp, rsp
	push r14
	mov r9, 0
	mov r8, 0
	b7:
	cmp r8, 90000000
	jl b8
	b9:
	mov rdi, r9
	call __toString
	mov rcx, rax
	mov rdi, rcx
	call __println
	mov rax, 0
	b10:
	pop r14
	leave
	ret 
	b8:
	mov rsi, 0
	b11:
	cmp rsi, 10
	jl b12
	b13:
	b14:
	inc r8
	jmp b7
	b12:
	cmp r8, 89999999
	jl b15
	b16:
	cmp rsi, 9
	jl b17
	b18:
	mov rax, r8
	mov rcx, 8
	imul rcx
	mov rcx, rax
	mov r10, rcx
	b19:
	mov rcx, 0
	mov rdi, 0
	b20:
	cmp rdi, r10
	jl b21
	b22:
	mov rax, rcx
	b23:
	mov rcx, rax
	add r9, rcx
	b17:
	b15:
	b24:
	inc rsi
	jmp b11
	b21:
	add rcx, rdi
	mov r14, rdi
	sub r14, 1
	mov r11, r10
	and r11, r14
	xor rcx, r11
	mov rax, rcx
	cdq
	mov rcx, 10000
	idiv rcx
	mov rcx, rdx
	b25:
	add rdi, 1
	jmp b20
__init:
	b26:
	push rbp
	mov rbp, rsp
	push r12
	push r15
	push rbx
	push r13
	push r14
	call _main
	pop r14
	pop r13
	pop rbx
	pop r15
	pop r12
	leave
	ret 
	section .data
