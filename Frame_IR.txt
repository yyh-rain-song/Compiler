_f:
	b0:
	push rbp
	mov rbp, rsp
	mov r9, rdi
	mov rcx, 0
	mov r8, 0
	b1:
	cmp r8, r9
	jl b2
	b3:
	mov rax, rcx
	b4:
	leave
	ret 
	b2:
	mov rsi, rcx
	add rsi, r8
	mov rcx, r8
	sub rcx, 1
	mov rdi, r9
	and rdi, rcx
	mov rcx, rsi
	xor rcx, rdi
	mov rax, rcx
	cdq
	mov rcx, 10000
	idiv rcx
	mov rcx, rdx
	b5:
	add r8, 1
	jmp b1
_main:
	b6:
	push rbp
	mov rbp, rsp
	push r14
	mov r10, 0
	mov rdi, 0
	b7:
	cmp rdi, 90000000
	jl b8
	b9:
	mov rdi, r10
	call __toString
	mov rcx, rax
	mov rdi, rcx
	call __println
	mov rax, 0
	b10:
	pop r14
	leave
	ret 
	b8:
	mov rcx, 0
	b11:
	cmp rcx, 10
	jl b12
	b13:
	b14:
	inc rdi
	jmp b7
	b12:
	cmp rdi, 89999999
	jl b15
	b16:
	cmp rcx, 9
	jl b17
	b18:
	mov rax, rdi
	mov rdx, 8
	imul rdx
	mov rsi, rax
	mov r14, rsi
	b19:
	mov rsi, 0
	mov r9, 0
	b20:
	cmp r9, r14
	jl b21
	b22:
	mov rax, rsi
	b23:
	mov rdx, rax
	add r10, rdx
	b17:
	b15:
	b24:
	inc rcx
	jmp b11
	b21:
	mov r8, rsi
	add r8, r9
	mov r11, r9
	sub r11, 1
	mov rsi, r14
	and rsi, r11
	xor r8, rsi
	mov rsi, r8
	mov rax, rsi
	cdq
	mov rsi, 10000
	idiv rsi
	mov rsi, rdx
	b25:
	add r9, 1
	jmp b20
__init:
	b26:
	push rbp
	mov rbp, rsp
	push r12
	push r13
	push rbx
	push r15
	push r14
	call _main
	pop r14
	pop r15
	pop rbx
	pop r13
	pop r12
	leave
	ret 
	section .data
